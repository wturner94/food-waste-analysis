import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns

# Get the current script's directory
script_dir = os.path.dirname(os.path.abspath(__file__))

# Define the relative paths to the CSV files within the "data" folder
food_waste_relative_path = os.path.join("data", "food_waste_by_country.csv")
gdp_per_capita_relative_path = os.path.join("data", "gdp_per_capita_current_prices.csv")
pop_density_relative_path = os.path.join("data", "pop_density_by_country.csv")

# Construct the absolute paths
food_waste_file = os.path.join(script_dir, food_waste_relative_path)
gdp_per_capita_file = os.path.join(script_dir, gdp_per_capita_relative_path)
pop_density_file = os.path.join(script_dir, pop_density_relative_path)

# Read the first two columns and the 11th column of the food waste CSV file into a dataframe
# Skip the first row and treat it as data, not header
food_waste_df = pd.read_csv(food_waste_file, encoding='ANSI', usecols=[0, 1, 10], header=None, skiprows=[0])

# Read only the first and 42nd column of the GDP per Capita CSV file into a dataframe
# Skip the first two rows and treat them as data, not header
gdp_per_capita_df = pd.read_csv(gdp_per_capita_file, encoding='ANSI', usecols=[0, 41], header=None, skiprows=[0, 1])

# Read only the first and 42nd column of the population density CSV file into a dataframe
# Skip the first two rows and treat them as data, not header
pop_density_df = pd.read_csv(pop_density_file, encoding='ANSI', usecols=[0, 64], header=None)

# Reset the index after reading the CSV files
food_waste_df.reset_index(drop=True, inplace=True)

pop_density_df.reset_index(drop=True, inplace=True)

# Rename the columns
food_waste_df.columns = ["country", "kg/capita/year", "region"]
gdp_per_capita_df.columns = ["country", "gdp/capita"]
pop_density_df.columns = ["country", "pop_density"]

# Merge the dataframes on the "country" column
waste_analysis = pd.merge(food_waste_df, gdp_per_capita_df, on="country")
waste_analysis = pd.merge(waste_analysis, pop_density_df, on="country")

# Reorder the columns in the waste_analysis dataframe
waste_analysis = waste_analysis[['country', 'kg/capita/year', 'gdp/capita', 'pop_density', 'region']]

# Convert to numeric, replace non-numeric values to NaN
waste_analysis['gdp/capita'] = pd.to_numeric(waste_analysis['gdp/capita'], errors='coerce')
waste_analysis['kg/capita/year'] = pd.to_numeric(waste_analysis['kg/capita/year'], errors='coerce')
waste_analysis['pop_density'] = pd.to_numeric(waste_analysis['pop_density'], errors='coerce')

# Calculate a ratio that compares the food waste generated by a country to its economic output
waste_analysis['waste_to_wealth_ratio'] = waste_analysis['kg/capita/year'] / waste_analysis['gdp/capita']

# ----------------------------------------------------------
# Display the updated dataframe
print("Updated Wealth to Waste Dataframe:")
print(waste_analysis)
# ----------------------------------------------------------

# Calculate regional averages for food waste
avg_region_data = waste_analysis.groupby('region').agg({'kg/capita/year': 'mean', 'gdp/capita': 'mean'})
# print(avg_region_data)

# Visualize the Waste-to-Wealth Ratio using a scatter plot
sns.scatterplot(x='gdp/capita', y='kg/capita/year', hue='waste_to_wealth_ratio', data=waste_analysis, palette='viridis')
plt.xlabel('GDP per Capita')
plt.ylabel('Food Waste per Capita')
plt.title('Waste-to-Wealth Ratio Across Countries')
plt.show()

print("Number of Rows in food_waste_df:", len(food_waste_df))
print("Number of Rows in gdp_per_capita_df:", len(gdp_per_capita_df))
print("Number of Rows in pop_density_df:", len(pop_density_df))
# Check unique values in the 'country' column

region_counts = waste_analysis['region'].value_counts()
print("Region Counts:")
print(region_counts)
